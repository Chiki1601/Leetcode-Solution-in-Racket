(define/contract (remove-anagrams words)
  (-> (listof string?) (listof string?))
  (let* ((f-csort (lambda (c_a c_b)
                        (< (char->integer c_a)
                           (char->integer c_b))))
         (anagrams? (lambda (word_a word_b)
                      (equal? (sort (string->list word_a) f-csort)
                              (sort (string->list word_b) f-csort)))))
    (let loop ((ws words) (acc '()))
      (if (empty? (cdr ws))
          (reverse (cons (car ws) acc))
          (let ((w_a (car ws))
                (w_b (cadr ws)))
            (if (anagrams? w_a w_b)
                (loop (cons w_a (cddr ws))
                      acc)
                (loop (cdr ws)
                      (cons w_a acc))))))))
